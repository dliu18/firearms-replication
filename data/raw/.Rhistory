model1_robust <- rlm(fhrev~muslim+income+elf+growth+britcol+postcom+opec, data=fish, method="MM")
coef(model1_robust)
ols_dfbetas_panel(model1)
estex_obj <- estex(model1)
library(influence)
library(ME)
library(influence.ME)
install.packages("influence.ME")
library(influence.ME)
estex_obj <- estex(model1)
estex_obj <- ME.estex(model1)
estex_obj <- estex(model1)
estex_obj <- influence.ME.estex(model1)
## Load packages we'll use
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(stargazer)
library(xtable)
library(sandwich)
library(lmtest)
library(influence.ME)
library(MASS)
## Set working directory
mywd <- "C:/Users/David/Google Drive/Senior Fall/SOC/Final"
setwd(mywd)
estex_obj <- estex(model1)
?estex
?ME.dfbetas
?dfbetas
library(stats)
dfbetas = dfbetas(model1)
dfbeta = dfbeta(model1)
head(dfbeta)
dfbeta = influence.measures(model1)
dfbeta$infmat
head(dfbeta$infmat)
out <- avPlots(model1, "growth")
library(car)
out <- avPlots(model1, "growth")
lines(loess.smooth(x = out$growth[,1],
y= out$growth[,2]), col = "dodgerblue", lwd = 2)
?predict
model1_interaction <- lm(fhrev~muslim+income+elf+growth+britcol+postcom+opec+opec:income, data=fish)
fish_modified <- fish
head(fish)
fish_modified$muslim = mean(fish$muslim)
head(fish_modified)
fish_modified$elf = mean(fish$elf)
fish_modified$growth = mean(fish$growth)
fish_modified$britcol = mean(fish$britcol)
fish_modified$postcom = mean(fish$postcom)
head(fish_modified)
pred.values <- as.data.frame(predict(model1_interaction, newdata = fish_modified, interval = "confidence"))
pred.opec <- pred.values[fish$opec == 1,]
pred.non-opec <- pred.values[fish$opec == 0,]
pred.nonopec <- pred.values[fish$opec == 0,]
length(pred.opec)
length(pred.nonopec)
nrow(pred.open)
nrow(pred.opec)
nrow(pred.nonopec)
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
xlab('Economic Development (Income)') +
ylab('Democracy Measure')
coef(model1_interaction)
c = coef(model1_interaction)
c["Intercept"]
c['(Intercept)']
c(1)
c[1]
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8], slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1], slope=c[3], color="red") +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
xlab('Economic Development (Income)') +
ylab('Democracy Measure')
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8], slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1], slope=c[3], color="red") +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$lwr), color='black', linetype="dashed") +
xlab('Economic Development (Income)') +
ylab('Democracy Measure')
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8], slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1], slope=c[3], color="red") +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$lwr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$lwr), color='black', linetype="dashed") +
xlab('Economic Development (Income)') +
ylab('Democracy Measure')
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8], slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1], slope=c[3], color="red") +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
# geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$upr), color='black', linetype="dashed") +
# geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$lwr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$lwr), color='black', linetype="dashed") +
xlab('Economic Development (Income)') +
ylab('Democracy Measure')
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8], slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1], slope=c[3], color="red") +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
# geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$upr), color='black', linetype="dashed") +
# geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$lwr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$lwr), color='black', linetype="dashed") +
xlab('Economic Development (Income)') +
ylab('Democracy Measure') +
theme_bw()
estimate_means <- df(c(mean(estimates_10), mean(estimates_100), mean(estimates_1000), mean(estimates_5000)))
estimate_means <- data.frame(c(mean(estimates_10), mean(estimates_100), mean(estimates_1000), mean(estimates_5000)))
estimate_means
estimate_means = transpose(estimate_means)
estimate_means
estimate_means <- data.frame(c("10", "100", "1000", "5000"),
c(mean(estimates_10), mean(estimates_100), mean(estimates_1000), mean(estimates_5000)))
estimate_means
colnames(estimate_means) <- c("sample size", "mean of estimates")
estimate_means
estimate_means = transpose(estimate_means)
estimate_means
estimate_means <- data.frame(c("10", "100", "1000", "5000"),
c(mean(estimates_10), mean(estimates_100), mean(estimates_1000), mean(estimates_5000)))
?data.drame
?data.frame
estimate_means <- matrix(c("10", "100", "1000", "5000"),
c(mean(estimates_10), mean(estimates_100), mean(estimates_1000), mean(estimates_5000)))
data.frame
print(xtable(estimate_means))
install.packages("olsrr")
dfbeta = influence.measures(model1)
dfbeta
head(dfbeta)
dfbeta$is.inf
length(dfbeta$is.inf)
dim(dfbeta$is.inf)
colnames(dfbeta$is.inf)
dfbeta <- dfbeta[,c("dfb.mslm", "dfb.incm", "dfb.elf", "dfb.grwt", "dfb.brtc", "dfb.pstc", "dfb.opec")]
dfbeta = influence.measures(model1)$is.inf
dfbeta <- dfbeta[,c("dfb.mslm", "dfb.incm", "dfb.elf", "dfb.grwt", "dfb.brtc", "dfb.pstc", "dfb.opec")]
dfbeta_numeric <- rowsum(as.numeric(dfbeta))
?rowsum
dfbeta_numeric <- rowSums(as.numeric(dfbeta))
dfbeta_numeric <- rowSums(dfbeta)
head(dfbeta_numeric)
sum(dfbeta_numeric)
install.packages("C:/Users/David/Downloads/olsrr_0.4.0.zip", repos = NULL, type = "win.binary")
library(olsrr)
library(olsrr)
install.packages("glue")
install.packages("C:/Users/David/Downloads/glue_1.2.0.zip", repos = NULL, type = "win.binary")
library(olsrr)
install.packages("goftest")
library(olsrr)
install.packages("nortest")
library(olsrr)
install.packages("recipes")
install.packages("C:/Users/David/Downloads/recipes_0.1.2.zip", repos = NULL, type = "win.binary")
library(olsrr)
install.packages("C:/Users/David/Downloads/rlang_0.1.6.zip", repos = NULL, type = "win.binary")
library(olsrr)
library(olsrr)
dfbeta = influence.measures(model1)
max(dfbeta)
dfbeta = influence.measures(model1)$infmat
dfbeta <- dfbeta[,c("dfb.mslm", "dfb.incm", "dfb.elf", "dfb.grwt", "dfb.brtc", "dfb.pstc", "dfb.opec")]
head(dfbeta)
image(dfbeta)
dfbeta_per_point <- rowSums(dfbeta)
abs(-1)
dfbeta = influence.measures(model1)$infmat
dfbeta <- dfbeta[,c("dfb.mslm", "dfb.incm", "dfb.elf", "dfb.grwt", "dfb.brtc", "dfb.pstc", "dfb.opec")]
dfbeta_per_point <- rowSums(abs(dfbeta))
dfbeta_per_point <- sort(dfbeta_per_point, decreasing=TRUE)
head(dfbeta_per_point)
colnames(dfbeta_per_point)
ggplot(dfbeta_per_point) +
geom_bar()
names(dfbeta_per_point)
dfbeta_df <- data.frame(cbind(names(dfbeta_per_point, dfbeta_per_point)))
dfbeta_df <- data.frame(c(names(dfbeta_per_point, dfbeta_per_point)))
dfbeta_df <- data.frame(c(names(dfbeta_per_point), dfbeta_per_point)))
dfbeta_df <- data.frame(c(names(dfbeta_per_point), dfbeta_per_point))
dim(dfbeta_df)
dfbeta_df <- data.frame(cbind(names(dfbeta_per_point), dfbeta_per_point))
dim(dfbeta_df)
colnames(dfbeta_df) <- c("country index", "total dfbeta")
ggplot(dfbeta_per_point, aes(x="country index", y="total dfbeta")) +
geom_bar()
head(dfbeta_df)
colnames(dfbeta_df) <- c("country_index", "total_dfbeta")
ggplot(dfbeta_per_point, aes(x=country_index, y=total_dfbeta)) +
geom_bar()
ggplot(dfbeta_df, aes(x=country_index, y=total_dfbeta)) +
geom_bar()
ggplot(dfbeta_df, aes(x=country_index, y=total_dfbeta)) +
geom_bar(stat="identity")
dfbeta_per_point[:10]
dfbeta = influence.measures(model1)$infmat
dfbeta <- dfbeta[,c("dfb.mslm", "dfb.incm", "dfb.elf", "dfb.grwt", "dfb.brtc", "dfb.pstc", "dfb.opec")]
dfbeta_per_point <- rowSums(abs(dfbeta))
dfbeta_per_point <- sort(dfbeta_per_point, decreasing=TRUE)
dfbeta_per_point[:10]
dfbeta_per_point[1:10]
head(fish)
outliers <- c(118, 27, 146, 14, 9, 62, 10)
fish_filtered <- fish[!(fish$X %in% outliers),]
model1_filtered <- lm(fhrev~muslim+income+elf+growth+britcol+postcom+opec, data=fish_filtered)
white <- coeftest(model1_filtered,vcov = vcovHC(model1_filtered, type = "HC1"))
white
out <- avPlots(model1, "growth")
lines(loess.smooth(x = out$growth[,1],
y= out$growth[,2]), col = "dodgerblue", lwd = 2)
fish$growth_logged = log(fish$growth)
out <- avPlots(model1, "growth")
lines(loess.smooth(x = out$growth[,1],
y= out$growth[,2]), col = "dodgerblue", lwd = 2)
fish$log_growth = log(fish$growth)
fish$square_growth = fish$growth^2
model1_revised <- lm(fhrev~muslim+income+elf+square_growth+britcol+postcom+opec, data=fish)
out <- avPlots(model1_revised, "square_growth")
lines(loess.smooth(x = out$square_growth[,1],
y= out$square_growth[,2]), col = "dodgerblue", lwd = 2)
fish$square_growth = fish$growth^2
model1_revised <- lm(fhrev~muslim+income+elf+square_growth+britcol+postcom+opec, data=fish)
out <- avPlots(model1_revised, "square_growth")
lines(loess.smooth(x = out$square_growth[,1],
y= out$square_growth[,2]), col = "dodgerblue", lwd = 2)
model1_interaction <- lm(fhrev~muslim+income+elf+growth+britcol+postcom+opec+opec:income, data=fish)
fish_modified <- fish
fish_modified$muslim = mean(fish$muslim)
fish_modified$postcom = mean(fish$postcom)
model1_interaction <- lm(fhrev~muslim+income+elf+growth+britcol+postcom+opec+opec:income, data=fish)
fish_modified <- fish
fish_modified$muslim = mean(fish$muslim)
fish_modified$elf = mean(fish$elf)
fish_modified$growth = mean(fish$growth)
fish_modified$britcol = mean(fish$britcol)
fish_modified$postcom = mean(fish$postcom)
pred.values <- as.data.frame(predict(model1_interaction, newdata = fish_modified, interval = "confidence"))
pred.opec <- pred.values[fish$opec == 1,]
pred.nonopec <- pred.values[fish$opec == 0,]
c = coef(model1_interaction)
c
intercept = c[1] + c[2]*mean(fish$muslim) + c[4]*mean(fish$elf) + c[5]*mean(fish$growth) +
c[6]*mean(fish$britcol) + c[7]*mean(fish$postcom)
intercept = c[2]*mean(fish$muslim) + c[4]*mean(fish$elf) + c[5]*mean(fish$growth) +
c[6]*mean(fish$britcol) + c[7]*mean(fish$postcom)
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8] + intercept, slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1] + intercept, slope=c[3], color="red") +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$lwr), color='black', linetype="dashed") +
# geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$upr), color='black', linetype="dashed") +
# geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$lwr), color='black', linetype="dashed") +
xlab('Economic Development (Income)') +
ylab('Democracy Measure') +
theme_bw()
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8] + intercept, slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1] + intercept, slope=c[3], color="red") +
ggtitle('Democracy on Economic Development for OPEC and non-OPEC countries') +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==1), aes(x=income, y=pred.opec$lwr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$upr), color='black', linetype="dashed") +
geom_line(data=subset(fish, opec==0), aes(x=income, y=pred.nonopec$lwr), color='black', linetype="dashed") +
xlab('Economic Development (Income)') +
ylab('Democracy Measure') +
theme_bw()
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8] + intercept, slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1] + intercept, slope=c[3], color="red") +
ggtitle('Democracy on Econ. Development for OPEC & non-OPEC nations') +
geom_ribbon(data=subset(fish, opec==0), aes(x=income, ymax=pred.nonopec$upr, ymin=pred.nonopec$lwr),
alpha=0.2) +
xlab('Economic Development (Income)') +
ylab('Democracy Measure') +
theme_bw()
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8] + intercept, slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1] + intercept, slope=c[3], color="red") +
ggtitle('Democracy on Econ. Development for OPEC & non-OPEC nations') +
geom_ribbon(data=subset(fish, opec==1),
aes(x=income, ymax=pred.opec$upr, ymin=pred.opec$lwr), alpha=0.2) +
color='black', linetype="dashed") +
ggplot() +
geom_point(data=subset(fish, opec==1), aes(x=income, y=fhrev), color='blue') +
geom_point(data=subset(fish, opec==0), aes(x=income, y=fhrev), color='red') +
geom_abline(intercept=c[1] + c[8] + intercept, slope=c[3] + c[9], color="blue") +
geom_abline(intercept=c[1] + intercept, slope=c[3], color="red") +
ggtitle('Democracy on Econ. Development for OPEC & non-OPEC nations') +
geom_ribbon(data=subset(fish, opec==1),
aes(x=income, ymax=pred.opec$upr, ymin=pred.opec$lwr), alpha=0.2) +
xlab('Economic Development (Income)') +
ylab('Democracy Measure') +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## Load packages we'll use
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(stargazer)
library(xtable)
library(sandwich)
library(lmtest)
library(stats)
library(MASS)
library(car)
library(chron)
## Set working directory
mywd <- "C:/Users/David/Desktop/Lyft Analytics Assignment/Lyft Analytics Assignment/"
setwd(mywd)
driver_ids <- read.csv("data/driver_ids.csv")
mywd <- "C:/Users/David/Desktop/Lyft Analytics Assignment/Lyft Analytics Assignment"
setwd(mywd)
getwd()
knitr::opts_chunk$set(echo = TRUE)
## Load packages we'll use
library(tidyverse)
library(ggplot2)
library(stargazer)
library(xtable)
library(reshape2)
## Set working directory
mywd <- "C:/Users/David/Google Drive/Senior Spring/SOC/1"
setwd(mywd)
## Load packages we'll use
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(stargazer)
library(xtable)
library(sandwich)
library(lmtest)
library(stats)
library(MASS)
library(car)
library(chron)
## Set working directory
mywd <- "C:/Users/David/Desktop/Lyft Analytics Assignment/Lyft Analytics Assignment"
setwd(mywd)
## Load packages we'll use
library(tidyverse)
library(ggplot2)
library(stargazer)
library(xtable)
library(reshape2)
## Set working directory
mywd <- "C:/Users/David/Google Drive/Senior Spring/SOC/1"
setwd(mywd)
## Load packages we'll use
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(stargazer)
library(xtable)
library(sandwich)
library(lmtest)
library(stats)
library(MASS)
library(car)
library(chron)
## Set working directory
mywd <- "C:/Users/David/Desktop/Lyft Analytics Assignment/Lyft Analytics Assignment"
setwd(mywd)
driver_ids <- read.csv(mywd + "data/driver_ids.csv")
mywd
driver_ids <- read.csv(paste(mywd, "data/driver_ids.csv"))
driver_ids <- read.csv(paste(mywd, "/data/driver_ids.csv"))
knitr::opts_chunk$set(echo = TRUE)
## Load packages we"ll use
library(tidyverse)
library(ggplot2)
library(stargazer)
library(xtable)
library(reshape2)
## Set working directory
mywd <- "C:/Users/David/Google Drive/Senior Spring/SOC/2"
setwd(mywd)
?rexp
lambda = 2
n = 1000
draws = rexp(n, lambda)
mean(draws)
var(draws)
?runif
?log
unif_draws <- runif(1000)
exp_draws <- -1 * log(1 - unif_draws) / 2
mean(exp_draws)
var(exp_draws)
emails <- read.csv('emails.csv')
lambdas <- seq(2, 6, 0.1)
sum_y <- sum(emails$t)
n <- length(emails$t)
log_likelihoods <- n * log(lambdas) - sum * lambdas
lambdas <- seq(2, 6, 0.01)
sum_y <- sum(emails$t)
n <- length(emails$t)
log_likelihoods <- n * log(lambdas) - sum * lambdas
log_likelihoods <- n * log(lambdas) - sum_y * lambdas
likelihood_curve <- data.frame(x = lambdas, y = log_likelihoods)
ggplot(data = likelihood_curve) +
geom_point(aes(x = x, y = y)) +
xlab("lambda") +
ylabl("log likelihood") +
ggtitle("Log likelihood curve for email data")
ggplot(data = likelihood_curve) +
geom_point(aes(x = x, y = y)) +
xlab("lambda") +
ylab("log likelihood") +
ggtitle("Log likelihood curve for email data")
?optimize
l <- function (lambda) n * log(lambda) - sum_y * lambda
optimize(f, c(2, 6), maximum = TRUE)
optimize(l, c(2, 6), maximum = TRUE)
n / sum_y
?pexp
qexp(6, rate = n / sum_y)
pexp(6, rate = n / sum_y)
pexp(1, rate = n / sum_y)
qexp(1, rate = n / sum_y)
n / sum_y
sum_y / n
qexp(.1, rate = n / sum_y)
pexp(.1, rate = n / sum_y)
pexp(0, rate = n / sum_y)
pexp(0.1, rate = n / sum_y)
subject_A <- read.csv('subjectsA.csv)
subject_A <- read.csv('subjectsA.csv')
subject_A <- read.csv('subjectsA.csv')
subject_B <- read.csv('subjectsB.csv')
?left_join
A_left <- left_join(emails, subject_A)
A_left <- left_join(emails, subject_A, by="id")
A_right <- right_join(emails, subject_A, by="id")
length(A_left)
nrow(A_right)
A_right
print(xtable(A_right))
A_right$t
B_right <- right_join(emails, subject_B, by = "id")
print(xtable(B_right))
emails <- read.csv('emails.csv')
lambdas <- seq(2, 6, 0.01)
### all emails
sum_y <- sum(emails$t)
n <- length(emails$t)
log_likelihoods_all <- n * log(lambdas) - sum_y * lambdas
### 50 random emails
n <- 50
sum_y <- sum(sample_n(emails, n)$t)
log_likelihoods_50 <- n * log(lambdas) - sum_y * lambdas
### 10 random emails
n <- 10
sum_y <- sum(sample_n(emails, n)$t)
log_likelihoods_10 <- n * log(lambdas) - sum_y * lambdas
likelihood_curve <- data.frame(x = lambdas,
y_all = log_likelihoods_all,
y_50 = log_likelihoods_50,
y_10 = log_likelihoods_10)
ggplot(data = likelihood_curve) +
geom_point(aes(x = x, y = y_all), color = "red") +
geom_point(aes(x = x, y = y_50), color = "blue") +
geom_point(aes(x = x, y = y_10), color = "green") +
xlab("lambda") +
ylab("log likelihood") +
ggtitle("Log likelihood curve for email data")
sum_y <- sum(emails$t)
n <- length(emails$t)
sqrt(n)/sum_y
colnames(A_right)
print(xtable(A_right[,c("From", "Subject")]))
?set.seed
library(doRNG)
install.packages("doRNG")
library(doRNG)
setwd("C:/Users/David/Google Drive/Senior Spring/SOC/firearms-replication/data/raw")
library(foreign)
read.dta("mort07.dta")
clear
clear;
